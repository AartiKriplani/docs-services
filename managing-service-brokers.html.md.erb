---
title: Managing Service Brokers
---
_This page assumes that you are using cf v5._

## Introduction

This document describes how to use the `cf` command line tools to manage a Cloud Foundry [Service Broker](services.html).

Service Brokers implement the [Service Broker API](write-service-broker.html).

## <a id='add-broker'></a>Adding a Broker ##

Once you've implemented the [Catalog endpoint](write-service-broker.html#catalog-mgmt), you'll want to see whether your services and plans are available to end users. Two steps are required:

1. Registering your broker with cloud controller.
2. Making plans public.

Before executing these two steps, make sure you are authenticated as a cloud controller admin via the `cf login` command.

### <a id='register-broker'></a>Registering a Broker with Cloud Foundry

Registering or updating a broker causes cloud controller to fetch and validate the catalog from your broker, and update the database with any changes found in the catalog. Registering or updating also saves the basic auth username and password, which the cloud controller will send to the broker with every request. Your service broker should validate the username and password sent in every request to prevent unauthorized activity. For example, if your broker did not validate the username and password, someone might be able to curl the broker to delete all service instances.

#### To add a broker ####

<pre class="terminal">
$ cf add-service-broker mybrokername --username someuser --password somethingsecure --url http://mybroker.example.com/
</pre>

#### To update a broker ####

<pre class="terminal">
$ cf update-service-broker mybrokername --username someuser --password somethingsecure --url http://mybroker.example.com/
</pre>

#### To verify that the broker has been added successfully ####

<pre class="terminal">
$ cf service-brokers
Getting service brokers... OK

Name            URL
my-service-name http://mybroker.example.com
</pre>

#### To view services advertised by the broker ####

<pre class="terminal">
$ cf services --marketplace
Getting services... OK

service       	version   provider   plans    	description
my-service-name n/a       n/a        free-plan	My service description.
</pre>

#### Possible Errors ####

`cf` returns the following error if incorrect basic auth credentials are provided:

<pre class="terminal">
CFoundry::ServerError: 10001: The service broker API returned an error from http://github-broker.primo.cf-app.com/v2/catalog: 404 Not Found
</pre>

`cf` returns the following error if your `unique_id`s for service and plan are not unique:

<pre class="terminal">
CFoundry::InvalidRequest: 10004: The request is invalid
</pre>

If you receive the following errors, check your broker logs for internal errors:

<pre class="terminal">
CFoundry::ServerError: 10001: The service broker API returned an error from http://github-broker.primo.cf-app.com/v2/catalog: 500 Internal Server Error
</pre>

### <a id='make-plan-public'></a>Making a Plan Public ###

By default, new plans are private. This means they are not visible to end users. This gives CF admins control over their catalogs when they don't have control over service brokers. To make a plan public:

1. Get the service plan guid:

  <pre class="terminal">
  $ cf services --marketplace --trace
  </pre>

  This will will return a JSON response which will include something like the following for each service.

  <pre class="terminal">
        "service_plans": [
          {
            "metadata": {
              "guid": "a01d462f-a4a4-4945-a008-3ff13c06f719",
              "url": "/v2/service_plans/a01d462f-a4a4-4945-a008-3ff13c06f719",
              "created_at": "2013-11-15T23:42:52+00:00",
              "updated_at": "2013-11-22T18:57:46+00:00"
            },
            "entity": {
              "name": "large",
              "free": false,
              "description": "Large Dummy",
              "service_guid": "e629bb0a-fee7-4a6c-a4f1-9eeec7096c29",
              "extra": "{\"cost\":20.0,\"bullets\":[]}",
              "unique_id": "addonOffering_3365",
              "public": false,
              "service_url": "/v2/services/e629bb0a-fee7-4a6c-a4f1-9eeec7096c29",
              "service_instances_url": "/v2/service_plans/a01d462f-a4a4-4945-a008-3ff13c06f719/service_instances"
            }
          },
  </pre>

2. Run the following curl using the service plan guid found in Step 1.

  <pre class="terminal">
  $ service_plan="a01d462f-a4a4-4945-a008-3ff13c06f719"
  $ cf curl PUT /v2/service_plans/$service_plan -b '{"public":'true'}'
  </pre>

3. To verify that the the plan was set to public, re-run the `cf services` command and check the 'public' field:

  <pre class="terminal">
  $ cf services --marketplace --trace
  </pre>

At this point you should see your service and plans in the Cloud Foundry Marketplace.

### Adding Multiple Service Brokers ###

Multiple service brokers may be added to a Cloud Foundry, but the following constraints must be kept in mind:

- It is not possible to have multiple brokers with the same name.
- It is not possible to have multiple brokers with the same URL.
- The Service ID and Plan IDs of each service advertised by the broker must be unique across Cloud Foundry: GUIDs should be used for these fields.

## <a id='list-broker'></a>Listing all Brokers ##

<pre class="terminal">
$ cf service-brokers
</pre>

## <a id='remove-broker'></a>Removing a Broker ##

Attempting to remove a service broker will fail if there are service instances for any service plan in the catalog. When planning to shut down or delete a broker, make sure that you remove all service instances before you shut it down. Failure to do so will leave [orphaned service instances](write-service-broker.html#orphans).

<pre class="terminal">
$ cf remove-service-broker mybrokername
</pre>